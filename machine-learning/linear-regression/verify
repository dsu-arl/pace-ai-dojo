#!/opt/pwn.college/python
import ast
import sys

from paceAITester.verify_helpers import *

sys.path.append('/challenge')


def print_flag():
    try:
        with open("/flag", "r") as f:
            print(f.read())
    except FileNotFoundError:
        print("Error: Flag file not found.")


def unparse(node):
    """A backport of ast.unparse for Python 3.8."""
    import ast

    class _Unparser(ast.NodeVisitor):
        def __init__(self):
            self.result = ""

        def visit_Module(self, node):
            for stmt in node.body:
                self.visit(stmt)

        def visit_Expr(self, node):
            self.visit(node.value)
            self.result += "\n"

        def visit_Assign(self, node):
            for target in node.targets:
                self.visit(target)
                self.result += " = "
            self.visit(node.value)
            self.result += "\n"

        def visit_Name(self, node):
            self.result += node.id

        def visit_Constant(self, node):
            self.result += repr(node.value)

        def visit_BinOp(self, node):
            self.visit(node.left)
            self.result += f" {self.operator(node.op)} "
            self.visit(node.right)

        def visit_Attribute(self, node):
            # Handles attribute access like model.fit
            self.visit(node.value)  # Visit the base (e.g., model)
            self.result += f".{node.attr}"  # Append the attribute name (e.g., fit)

        def visit_Call(self, node):
            # Handles function/method calls like model.fit()
            self.visit(node.func)  # Visit the function being called
            self.result += "("
            for i, arg in enumerate(node.args):
                if i > 0:
                    self.result += ", "
                self.visit(arg)  # Visit each argument
            self.result += ")"

        def visit_arguments(self, node):
            # Handle arguments for function definitions (not relevant here)
            pass

        def operator(self, op):
            if isinstance(op, ast.Add):
                return "+"
            if isinstance(op, ast.Sub):
                return "-"
            if isinstance(op, ast.Mult):
                return "*"
            if isinstance(op, ast.Div):
                return "/"
            raise NotImplementedError(f"Operator {op} not implemented")

    unparser = _Unparser()
    unparser.visit(node)
    return unparser.result


def extract_python_details(filepath):
    with open(filepath, 'r') as file:
        tree = ast.parse(file.read(), filename=filepath)

    lines = []
    for node in ast.walk(tree):
        # Handle assignment: variable = function(...)
        if isinstance(node, ast.Assign) and isinstance(node.value, ast.Call):
            # Handle unpacked variables (tuple or list)
            if isinstance(node.targets[0], (ast.Tuple, ast.List)):
                variable = tuple(unparse(var) for var in node.targets[0].elts)
            # Single variable assignment
            elif isinstance(node.targets[0], ast.Name):
                variable = node.targets[0].id if node.targets[0].id != '_' else None
            else:
                variable = None
            
            func = unparse(node.value.func)
            args = [unparse(arg) for arg in node.value.args]
            kwargs = {kw.arg: unparse(kw.value) for kw in node.value.keywords}

            lines.append({
                'variable': variable,
                'function': func,
                'args': args,
                'kwargs': kwargs
            })

        # Handle standalone function calls like model.fit(...)
        elif isinstance(node, ast.Expr) and isinstance(node.value, ast.Call):
            func = unparse(node.value.func)
            args = [unparse(arg) for arg in node.value.args]
            kwargs = {kw.arg: unparse(kw.value) for kw in node.value.keywords}

            lines.append({
                'variable': None,
                'function': func,
                'args': args,
                'kwargs': kwargs
            })
    
    return lines


def find_function_call(lines, function_name):
    function_calls = []
    for line in lines:
        if line['function'] == function_name:
            function_calls.append(line)
    return function_calls


# Variable names
X_train_var = None
X_test_var = None
y_train_var = None
y_test_var = None
model_var = None
y_pred_var = None
mse_var = None


def step_1_check(lines) -> tuple[bool, str]:
    # GOAL: Split the dataset into training and testing datasets using train_test_split()
    # {'variable': ('X_train', 'X_test', 'y_train', 'y_test'), 'function': 'train_test_split', 'args': ['X', 'y'], 'kwargs': {'test_size': '0.2', 'random_state': '42'}}
    global X_train_var
    global X_test_var
    global y_train_var
    global y_test_var
    function_calls = find_function_call(lines, 'train_test_split')
    
    # check if train_test_split() is called
    if len(function_calls) == 0:
        return False, "train_test_split() isn't called"

    # train_test_split() should only be called once
    if len(function_calls) > 1:
        return False, 'train_test_split() should only be called once'
    
    function_call = function_calls[0]

    # train_test_split() should be unpacked into four variables
    if len(function_call['variable']) != 4:
        return False, 'train_test_split() should be unpacked into 4 variables'

    X_train_var, X_test_var, y_train_var, y_test_var = function_call['variable']

    solution_args = ['X', 'y']
    if function_call['args'] != solution_args:
        return False, 'You need to pass X and y to train_test_split() so knows what data to split'
    
    solution_kwargs = {'test_size': '0.2', 'random_state': '42'}
    if function_call['kwargs'] != solution_kwargs:
        return False, "train_test_split() parameters don't match what's expected, did you give 'test_size' and 'random_state' the correct values from the instructions?"

    return True, ''


def step_2_check(lines) -> tuple[bool, str]:
    # GOAL: Create a linear regression model
    # {'variable': 'model', 'function': 'LinearRegression', 'args': [], 'kwargs': {}}
    global model_var
    function_calls = find_function_call(lines, 'LinearRegression')

    # check if LinearRegression() is called
    if len(function_calls) == 0:
        return False, "LinearRegression() isn't called"

    # LinearRegression() should only be called once
    if len(function_calls) > 1:
        return False, 'LinearRegression() should only be called once'

    function_call = function_calls[0]

    # Make sure it's assigned to a variable (not _)
    if function_call['variable'] is None:
        return False, 'LinearRegression() should be assigned to a variable'
    
    model_var = function_call['variable']

    solution_args = []
    solution_kwargs = {}
    if function_call['args'] != solution_args or function_call['kwargs'] != solution_kwargs:
        return False, "You shouldn't be passing any parameters to LinearRegression() for this challenge"

    return True, ''


def step_3_check(lines) -> tuple[bool, str]:
    # GOAL: Fit the linear regression model to the training dataset
    # {'variable': None, 'function': 'model.fit', 'args': ['X_train', 'y_train'], 'kwargs': {}}
    # {'variable': None, 'function': 'model.fit', 'args': [], 'kwargs': {'X': 'X_train', 'y': 'y_train'}}
    global X_train_var
    global y_train_var
    global model_var
    function_calls = find_function_call(lines, f'{model_var}.fit')

    # Check if fit() is called
    if len(function_calls) == 0:
        return False, f"{model_var}.fit() isn't called"

    # Make sure fit() is only called once
    if len(function_calls) > 1:
        return False, f"{model_var}.fit() shouldn't be called more than once"

    function_call = function_calls[0]

    # fit() shouldn't be assigned to any variables
    if function_call['variable'] is not None:
        return False, f"{model_var}.fit() shouldn't be assigned to any variables"
    
    # Make sure parameters passed to fit() are correct
    solution_1_args = [X_train_var, y_train_var]
    solution_1_kwargs = {}

    solution_2_args = []
    solution_2_kwargs = {'X': X_train_var, 'y': y_train_var}

    args = function_call['args']
    kwargs = function_call['kwargs']

    check_passed = True
    if args == solution_1_args:
        if kwargs != solution_1_kwargs:
            check_passed = False
    elif args == solution_2_args:
        if kwargs != solution_2_kwargs:
            check_passed = False
    else:
        check_passed = False
    
    if not check_passed:
        return False, f'Incorrect parameters for {model_var}.fit(), are you correctly passing the training data to it?'
    
    return True, ''


def step_4_check(lines) -> tuple[bool, str]:
    # GOAL: Make predictions on the test dataset using the trained linear regression model
    # {'variable': 'y_pred', 'function': 'model.predict', 'args': ['X_test'], 'kwargs': {}}
    # {'variable': 'y_pred', 'function': 'model.predict', 'args': [], 'kwargs': {'X': 'X_test'}}
    global X_test_var
    global model_var
    global y_pred_var
    function_calls = find_function_call(lines, f'{model_var}.predict')

    # Check if predict() is called
    if len(function_calls) == 0:
        return False, f"{model_var} isn't called"

    # Make sure predict() is only called once
    if len(function_calls) > 1:
        return False, f"{model_var}.predict() shouldn't be called more than once"

    function_call = function_calls[0]

    # predict() should only be assigned to a single value and not None
    if not isinstance(function_call['variable'], str) or function_call['variable'] is None:
        return False, f"{model_var}.predict() should only be assigned to a single variable"
    
    y_pred_var = function_call['variable']

    solution_1_args = [X_test_var]
    solution_1_kwargs = {}
    solution_2_args = []
    solution_2_kwargs = {'X': X_test_var}
    args = function_call['args']
    kwargs = function_call['kwargs']

    check_passed = True
    if args == solution_1_args:
        if kwargs != solution_1_kwargs:
            check_passed = False
    elif args == solution_2_args:
        if kwargs != solution_2_kwargs:
            check_passed = False
    else:
        check_passed = False
    
    if not check_passed:
        return False, f'Incorrect parameters for {model_var}.predict(), are you correctly passing the test data to it?'

    return True, ''


def step_5_check(lines) -> tuple[bool, str]:
    # GOAL: Get the mean squared error from the test dataset and the linear regression model's predictions
    # {'variable': 'mse', 'function': 'mean_squared_error', 'args': ['y_test', 'y_pred'], 'kwargs': {}}
    # {'variable': 'mse', 'function': 'mean_squared_error', 'args': [], 'kwargs': {'y_true': 'y_test', 'y_pred': 'y_pred'}}
    global y_test_var
    global y_pred_var
    global model_var
    global mse_var
    function_calls = find_function_call(lines, 'mean_squared_error')

    # Check if mean_squared_error() is called
    if len(function_calls) == 0:
        return False, f"mean_squared_error() isn't called"

    # Make sure mean_squared_error() is only called once
    if len(function_calls) > 1:
        return False, f"mean_squared_error() shouldn't be called more than once"
    
    function_call = function_calls[0]

    # mean_squared_error() should only be assigned to a single value and not None
    if not isinstance(function_call['variable'], str) or function_call['variable'] is None:
        return False, "mean_squared_error() should only be assigned to a single variable"
    mse_var = function_call['variable']
    
    # Check parameters for mean_squared_error()
    solution_1_args = [y_test_var, y_pred_var]
    solution_1_kwargs = {}
    solution_2_args = []
    solution_2_kwargs = {'y_true': y_test_var, 'y_pred': y_pred_var}

    args = function_call['args']
    kwargs = function_call['kwargs']

    check_passed = True
    if args == solution_1_args:
        if kwargs != solution_1_kwargs:
            check_passed = False
    elif args == solution_2_args:
        if kwargs != solution_2_kwargs:
            check_passed = False
    else:
        check_passed = False
    
    if not check_passed:
        return False, f'Incorrect parameters for mean_squared_error(), are you correctly passing the test output and model output to it?'

    return True, ''


def step_6_check(lines) -> tuple[bool, str]:
    # GOAL: Print the value of the MSE variable
    # {'variable': None, 'function': 'print', 'args': ["'MSE:'", 'mse'], 'kwargs': {}}
    global mse_var
    function_calls = find_function_call(lines, 'print')

    # Check if print() is called
    if len(function_calls) == 0:
        return False, f"print() isn't called"

    # Make sure print() is only called once
    if len(function_calls) > 1:
        return False, f"print() shouldn't be called more than once"
    
    function_call = function_calls[0]

    # print() shouldn't be assigned to any variables
    if function_call['variable'] is not None:
        return False, "print() shouldn't be assigned to any variables"

    # mse_var should be in print()'s args and kwargs should be empty
    if mse_var not in function_call['args']:
        return False, 'Are you printing out the correct variable for the MSE?'
    
    # kwargs should be empty
    if function_call['kwargs'] != {}:
        return False, "You don't need any keyword arguments for this print statement"
    
    return True, ''


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: verify <user_script>.py')
        sys.exit(1)
    
    script_path = sys.argv[1]
    lines = extract_python_details(script_path)
    
    red_text_code = '\033[31m'
    green_text_code = '\033[32m'
    reset_code = '\033[0m'

    checks = [step_1_check, step_2_check, step_3_check, step_4_check, step_5_check, step_6_check]
    for i in range(len(checks)):
        check_func = checks[i]
        is_correct, error_msg = check_func(lines)
        if is_correct:
            print(f'{green_text_code}Step {i + 1} Passed{reset_code}')
        else:
            print(f'{red_text_code}Step {i + 1} Failed{reset_code}')
            print(error_msg)
            sys.exit(1)

    print('Congratulations! You have passed this challenge! Here is your flag:')
    print_flag()

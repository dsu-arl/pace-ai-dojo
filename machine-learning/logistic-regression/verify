#!/opt/pwn.college/python
import sys
sys.path.append('/challenge')

from paceAITester.verify_helpers import extract_python_details, find_function_call


def print_flag():
    try:
        with open("/flag", "r") as f:
            print(f.read())
    except FileNotFoundError:
        print("Error: Flag file not found.")

""" Starter code
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# Initializing the data
iris = load_iris()
X = iris.data
y = iris.target
"""

# Variable names
X_train_var = None
X_test_var = None
y_train_var = None
y_test_var = None
model_var = None
y_pred_var = None
accuracy_var = None


def step_1_check(lines: list[dict]):
    """
    Step Goal: Split the dataset where the test dataset is 20% of the original and set a random state of 42

    :param lines: List of dictionaries containing Python function calls from input file
    :type lines: list[dict]
    :return: A tuple containing a boolean indicating success or failure of the validation,
             and a string message providing error details if failure
    :rtype: tuple[bool, str]
    """
    # {'variable': ('X_train', 'X_test', 'y_train', 'y_test'), 'function': 'train_test_split', 'args': ['X', 'y'], 'kwargs': {'test_size': '0.2', 'random_state': '42'}}
    global X_train_var
    global X_test_var
    global y_train_var
    global y_test_var
    function_calls = find_function_call(lines, 'train_test_split')

    # Check if function is called
    if len(function_calls) == 0:
        return False, "train_test_split() isn't called"

    # Make sure function isn't called more than once
    if len(function_calls) > 1:
        return False, 'train_test_split() only needs to be called once'
    
    function_call = function_calls[0]

    # Make sure result is stored in 4 variables
    if function_call['variable'] is None:
        return False, "Make sure to store the result of train_test_split() in your train and test dataset variables"
    
    if len(function_call['variable']) != 4:
        return False, "The result of train_test_split() should be stored in 4 variables (train inputs, test inputs, train outputs, test outputs)"

    X_train_var, X_test_var, y_train_var, y_test_var = function_call['variable']

    # Make sure args is correct
    solution_args = ['X', 'y']
    if function_call['args'] != solution_args:
        return False, "Did you correctly pass 'X' and 'y' to train_test_split()?"

    # Make sure kwargs is correct
    solution_kwargs = {'test_size': '0.2', 'random_state': '42'}
    if function_call['kwargs'] != solution_kwargs:
        return False, "Did you supply train_test_split() with the correct values for the parameters 'test_size' and 'random_state'?"

    return True, ''


def step_2_check(lines: list[dict]):
    """
    Step Goal: Initialize a logistic regression model

    :param lines: List of dictionaries containing Python function calls from input file
    :type lines: list[dict]
    :return: A tuple containing a boolean indicating success or failure of the validation,
             and a string message providing error details if failure
    :rtype: tuple[bool, str]
    """
    # {'variable': 'model', 'function': 'LogisticRegression', 'args': [], 'kwargs': {}}
    global model_var
    function_calls = find_function_call(lines, 'LogisticRegression')

    # Check if LogisticRegression is called
    if len(function_calls) == 0:
        return False, "LogisticRegression isn't called"
    
    # LogisticRegression() should only be called once
    if len(function_calls) > 1:
        return False, 'LogisticRegression() should only be called once'
    
    function_call = function_calls[0]

    # Make sure it's assigned to a variable (not including _)
    if function_call['variable'] is None:
        return False, 'LogisticRegression() should be assigned to a variable'
    
    model_var = function_call['variable']

    solution_args = []
    solution_kwargs = {}
    if function_call['args'] != solution_args or function_call['kwargs'] != solution_kwargs:
        return False, "You shouldn't be passing any parameters to LogisticRegression() for this challenge"

    return True, ''


def step_3_check(lines: list[dict]):
    """
    Step Goal: Train the logistic regression model on the iris dataset

    :param lines: List of dictionaries containing Python function calls from input file
    :type lines: list[dict]
    :return: A tuple containing a boolean indicating success or failure of the validation,
             and a string message providing error details if failure
    :rtype: tuple[bool, str]
    """
    # {'variable': None, 'function': 'model.fit', 'args': ['X_train', 'y_train'], 'kwargs': {}}
    global X_train_var
    global y_train_var
    global model_var
    function_calls = find_function_call(lines, f'{model_var}.fit')

    # Check if fit() is called
    if len(function_calls) == 0:
        return False, f"{model_var}.fit() isn't called"

    # Make sure fit() is only called once
    if len(function_calls) > 1:
        return False, f"{model_var}.fit() shouldn't be called more than once"

    function_call = function_calls[0]

    # fit() shouldn't be assigned to any variables
    if function_call['variable'] is not None:
        return False, f"{model_var}.fit() shouldn't be assigned to any variables"
    
    # Make sure parameters passed to fit() are correct
    solution_1_args = [X_train_var, y_train_var]
    solution_1_kwargs = {}

    solution_2_args = []
    solution_2_kwargs = {'X': X_train_var, 'y': y_train_var}

    args = function_call['args']
    kwargs = function_call['kwargs']

    check_passed = True
    if args == solution_1_args:
        if kwargs != solution_1_kwargs:
            check_passed = False
    elif args == solution_2_args:
        if kwargs != solution_2_kwargs:
            check_passed = False
    else:
        check_passed = False
    
    if not check_passed:
        return False, f'Incorrect parameters for {model_var}.fit(), are you correctly passing the training data to it?'
    
    return True, ''


def step_4_check(lines: list[dict]):
    """
    Step Goal: Make predictions on the test iris dataset

    :param lines: List of dictionaries containing Python function calls from input file
    :type lines: list[dict]
    :return: A tuple containing a boolean indicating success or failure of the validation,
             and a string message providing error details if failure
    :rtype: tuple[bool, str]
    """
    # {'variable': 'y_pred', 'function': 'model.predict', 'args': ['X_test'], 'kwargs': {}}
    global X_test_var
    global model_var
    global y_pred_var
    function_calls = find_function_call(lines, f'{model_var}.predict')

    # Check if predict() is called
    if len(function_calls) == 0:
        return False, f"{model_var} isn't called"

    # Make sure predict() is only called once
    if len(function_calls) > 1:
        return False, f"{model_var}.predict() shouldn't be called more than once"

    function_call = function_calls[0]

    # predict() should only be assigned to a single value and not None
    if not isinstance(function_call['variable'], str) or function_call['variable'] is None:
        return False, f"{model_var}.predict() should only be assigned to a single variable"
    
    y_pred_var = function_call['variable']

    solution_1_args = [X_test_var]
    solution_1_kwargs = {}
    solution_2_args = []
    solution_2_kwargs = {'X': X_test_var}
    args = function_call['args']
    kwargs = function_call['kwargs']

    check_passed = True
    if args == solution_1_args:
        if kwargs != solution_1_kwargs:
            check_passed = False
    elif args == solution_2_args:
        if kwargs != solution_2_kwargs:
            check_passed = False
    else:
        check_passed = False
    
    if not check_passed:
        return False, f'Incorrect parameters for {model_var}.predict(), are you correctly passing the test data to it?'

    return True, ''


def step_5_check(lines: list[dict]):
    """
    Step Goal: Retrieve the model's test dataset accuracy and print it out

    :param lines: List of dictionaries containing Python function calls from input file
    :type lines: list[dict]
    :return: A tuple containing a boolean indicating success or failure of the validation,
             and a string message providing error details if failure
    :rtype: tuple[bool, str]
    """
    # {'variable': 'accuracy', 'function': 'accuracy_score', 'args': ['y_test', 'y_pred'], 'kwargs': {}}
    global y_test_var
    global y_pred_var
    global model_var
    global accuracy_var
    function_calls = find_function_call(lines, 'accuracy_score')

    # Check if accuracy_score() is called
    if len(function_calls) == 0:
        return False, f"accuracy_score() isn't called"

    # Make sure accuracy_score() is only called once
    if len(function_calls) > 1:
        return False, f"accuracy_score() shouldn't be called more than once"
    
    function_call = function_calls[0]

    # accuracy_score() should only be assigned to a single value and not None
    if not isinstance(function_call['variable'], str) or function_call['variable'] is None:
        return False, "accuracy_score() should only be assigned to a single variable"
    accuracy_var = function_call['variable']
    
    # Check parameters for accuracy_score()
    solution_1_args = [y_test_var, y_pred_var]
    solution_1_kwargs = {}
    solution_2_args = []
    solution_2_kwargs = {'y_true': y_test_var, 'y_pred': y_pred_var}

    args = function_call['args']
    kwargs = function_call['kwargs']

    check_passed = True
    if args == solution_1_args:
        if kwargs != solution_1_kwargs:
            check_passed = False
    elif args == solution_2_args:
        if kwargs != solution_2_kwargs:
            check_passed = False
    else:
        check_passed = False
    
    if not check_passed:
        return False, f'Incorrect parameters for accuracy_score(), are you correctly passing the test output and model output to it?'

    return True, ''


def step_6_check(lines: list[dict]):
    """
    Step Goal: Print out the model's accuracy

    :param lines: List of dictionaries containing Python function calls from input file
    :type lines: list[dict]
    :return: A tuple containing a boolean indicating success or failure of the validation,
             and a string message providing error details if failure
    :rtype: tuple[bool, str]
    """
    global accuracy_var
    function_calls = find_function_call(lines, 'print')

    # Check if print() is called
    if len(function_calls) == 0:
        return False, f"print() isn't called"

    # Make sure print() is only called once
    if len(function_calls) > 1:
        return False, f"print() shouldn't be called more than once"
    
    function_call = function_calls[0]

    # print() shouldn't be assigned to any variables
    if function_call['variable'] is not None:
        return False, "print() shouldn't be assigned to any variables"

    # accuracy_var should be in print()'s args and kwargs should be empty
    if accuracy_var not in function_call['args']:
        return False, 'Are you printing out the correct variable for the accuracy?'
    
    # kwargs should be empty
    if function_call['kwargs'] != {}:
        return False, "You don't need any keyword arguments for this print statement"
    
    return True, ''


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: verify <user_script>.py')
        sys.exit(1)
    
    script_path = sys.argv[1]
    lines = extract_python_details(script_path)

    red_text_code = '\033[31m'
    green_text_code = '\033[32m'
    reset_code = '\033[0m'

    checks = [step_1_check, step_2_check, step_3_check, step_4_check, step_5_check, step_6_check]
    for i in range(len(checks)):
        check_func = checks[i]
        is_correct, error_msg = check_func(lines)
        if is_correct:
            print(f'{green_text_code}Step {i + 1} Passed{reset_code}')
        else:
            print(f'{red_text_code}Step {i + 1} Failed{reset_code}')
            print(error_msg)
            sys.exit(1)
    
    print('Congratulations! You have passed this challenge! Here is your flag:')
    print_flag()

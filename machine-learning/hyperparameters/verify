#!/opt/pwn.college/python
import sys
sys.path.append('/challenge')

def print_flag():
	try:
		with open("/flag", "r") as f:
			print(f.read())
	except FileNotFoundError:
		print("Error: Flag file not found.")

# Add your imports and other code below here
from paceAITester.verify_helpers import extract_python_details, retrieve_variable_values


def find_variable_init(variables, var_name):
    for key, value in variables.items():
         if key == var_name:
              return {'name': key, 'value': value}

    return None


def check_template(function_calls):
    # Verifies that the given code template has not been modified
    correct_template = [
        {'variable': 'iris', 'function': 'load_iris', 'args': [], 'kwargs': {}},
        {'variable': ('X_train', 'X_test', 'y_train', 'y_test'), 'function': 'train_test_split', 'args': ['X', 'y'], 'kwargs': {'test_size': '0.2', 'random_state': '42'}},
        {'variable': 'model', 'function': 'RandomForestClassifier', 'args': [], 'kwargs': {'n_estimators': 'n_estimators', 'random_state': '42'}},
        {'variable': None, 'function': 'model.fit', 'args': ['X_train', 'y_train'], 'kwargs': {}},
        {'variable': 'y_pred_proba', 'function': 'model.predict_proba', 'args': ['X_test'], 'kwargs': {}},
        {'variable': 'loss', 'function': 'log_loss', 'args': ['y_test', 'y_pred_proba'], 'kwargs': {}},
        {'variable': None, 'function': 'print', 'args': ["'Target Loss: 0.0252'"], 'kwargs': {}},
        {'variable': None, 'function': 'print', 'args': ["' Model Loss: 'loss'.4f'"], 'kwargs': {}}
    ]
    if function_calls != correct_template:
        return False, "No need to modify the given code template, only modify the 'n_estimators' value"
    
    return True, ''


def check(variables):
    var_call = find_variable_init(variables, 'n_estimators')
    if var_call is None:
        return False, "Make sure you have a variable called 'n_estimators'"
    
    if var_call['value'] == 'Unresolvable dynamic value':
        return False, "Make sure you're assigning an integer value to 'n_estimators'"

    guess = var_call['value']
    if guess != 140:
        if guess > 140:
            direction = 'Lower'
        else:
            direction = 'Higher'
        return False, f"Incorrect (HINT: {direction} 'n_estimators' value)"

    return True, ''


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: verify <user_script>.py')
        sys.exit(1)
    
    script_path = sys.argv[1]
    variables = retrieve_variable_values(script_path)
    function_calls = extract_python_details(script_path)

    red_text_code = '\033[31m'
    green_text_code = '\033[32m'
    reset_code = '\033[0m'

    template_correct, error_msg = check_template(function_calls)
    if not template_correct:
        print(f"{red_text_code}{error_msg}{reset_code}")
        sys.exit(1)

    passed, error_msg = check(variables)
    if not passed:
        print(f"{red_text_code}{error_msg}{reset_code}")
        sys.exit(1)
    
    print(f'{green_text_code}Correct{reset_code}')
    print('Congratulations! You have passed this challenge! Here is your flag:')
    print_flag()